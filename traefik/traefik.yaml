log:
  level: INFO

entryPoints:
  http:
    address: ":9080"

  https:
    address: ":9443"

certificatesResolvers:
  letsencrypt:
    # https://docs.traefik.io/master/https/acme/#lets-encrypt
    acme:
      email: ""
      storage: /etc/traefik/acme/acme.json
      # https://docs.traefik.io/master/https/acme/#httpchallenge
      httpChallenge:
        entryPoint: http

http:
  routers:
    backend:
      service: django
      rule: >-
        Host(`{{ env "HOST_DOMAIN" }}`) &&     (
          PathPrefix(`/frontend-config.js`)    ||
          PathPrefix(`/api`)                   ||
          PathPrefix(`/accounts`)              ||
          PathPrefix(`/account-confirm-email`) ||
          PathPrefix(`/proxy`)                 ||
          PathPrefix(`/tempStorage`)           ||
          PathPrefix(`/login`)                 ||
          PathPrefix(`/complete`)              ||
          PathPrefix(`/globus`)                )

      entryPoints:
      - http
      - https

    frontend:
      service: react
      rule: >-
        Host(`{{ env "HOST_DOMAIN" }}`) && PathPrefix(`/`)

      entryPoints:
      - https
      middlewares:
      - secure-headers
      # If HOST_DOMAIN is left at localhost, obviously the cert issuance from
      # Let's Encrypt will fail. What isn't obvious is that this will cause the
      # route to return 404 even though it would otherwise work fine. To address
      # that, we only set the tls certResolver if HOST_DOMAIN has been set
      {{ if not (eq (env "HOST_DOMAIN") "localhost") }}
      tls:
        certResolver: "letsencrypt"
      {{ end }}
      # https://docs.traefik.io/master/routing/routers/#certresolver

  middlewares:
    secure-headers:
      # https://doc.traefik.io/traefik/middlewares/headers/#stsseconds
      # https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security
      headers:
        stsPreload: true
        stsIncludeSubdomains: true
        stsSeconds: 31536000
        forceSTSHeader: true

  services:
    django:
      loadBalancer:
        servers:
        - url: http://django:5000
    react:
      loadBalancer:
        servers:
        - url: http://react:8080

providers:
  # https://docs.traefik.io/master/providers/file/
  file:
    filename: /etc/traefik/traefik.yaml

tls:
  options:
    default:
      minVersion: VersionTLS12
      cipherSuites:
      - TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
      - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
      - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
      - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
      - TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305
      - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305
